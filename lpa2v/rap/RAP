/*
 * Universidade Federal de São Carlos
 * Bacharelado em Sistemas de Informação
 * Trabalho de conclusão de curso
 * Implementação de aplicativo para manipular Redes de Análise Paraconsistente RAP
 */

package br.com.paraconsistent.lpa2v.RAP;

import br.com.paraconsistent.lpa2v.NAP;
import br.com.paraconsistent.lpa2v.modeler.Modeler;
import br.com.paraconsistent.lpa2v.modeler.Modeler;
import br.com.paraconsistent.lpa2v.modeler.Modeler;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 *
 * @author apedroso
 */
public class RAP implements Serializable, Comparable<RAP>{
    
    // Declaração das variável Estática para incrementar novas intâncias
    private static int sequence;
    
    // Declaração das variávéis para identificar cada instância desta classe
    private int rapID;
    private String rapName;

    private List<Modeler> modList;
    private List<NAP> napList;
    
    public RAP(){
        this.rapID=sequence++;
        this.modList = new ArrayList();
        this.napList = new ArrayList();
    }

    // Método getModelerName para retornar nome do modelador
    public int getRapID(){
        return rapID;
    }
    // Método setModelerName para atribuir nome ao modelador
    public void setRapName(String rapName){
        this.rapName=rapName;
    }

    // Método getModelerName para retornar nome do modelador
    public String getRapName(){
        return rapName;
    }
    
    public void addModeler(Modeler modeler) {
        modList.add(modeler);
    }
    
    public Modeler getModeler(String modelerName) {
        for (Modeler m : modList) {
            if (m.getModelerName().equals(modelerName)) {
                return m;
            }
        }
        return null;
    }

    public void addNAP(NAP nap) {
        napList.add(nap);
    }
    
    public NAP getNAP(String p) {
        for (NAP nap : napList) {
            if (nap.getP().equals(p)) {
                return nap;
            }
        }
        return null;
    }

    //@Override
    public String toString() {
        return "(" + this.getRapID() + ") " + this.getRapName() + " -- ";
    }

    //@Override
    public boolean equals(Object obj) {
        boolean equals = false;
        if (obj instanceof RAP) {
            equals = this.rapName.equals(((RAP) obj).rapName);
            if (equals) {
                equals = (this.rapID == ((RAP) obj).rapID);
            }
        }
        return equals;
    }

    //@Override
    public int hashCode() {
        int hash = 3;
        hash = 29 * hash + (this.rapName != null ? this.rapName.hashCode() : 0);
        hash = 29 * hash + this.rapID;
        return hash;
    }

    //@Override
    public int compareTo(RAP r) {
        if (this.rapID == r.rapID) {
            return this.rapName.compareTo(r.rapName);
        } else {
            return this.rapID - r.rapID;
        }
    }
}
