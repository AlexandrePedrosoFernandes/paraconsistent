/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.paraconsistent.lpa2v.form;

import br.com.paraconsistent.lpa2v.GCR;
import br.com.paraconsistent.lpa2v.NAP;
import br.com.paraconsistent.lpa2v.RAP.RAP;
import br.com.paraconsistent.lpa2v.RAP.SerializerRAP;
import static br.com.paraconsistent.lpa2v.form.preLoad.inicializaVariaveis;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ale
 */
public class JavaFrameLPA2v extends javax.swing.JFrame {

    /**
     * Creates new form BrainCycle
     */
    public JavaFrameLPA2v() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenu5 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jdpLPA2v = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jMenuNewRAP = new javax.swing.JMenuItem();
        jMenuOpenRAP = new javax.swing.JMenuItem();
        jMenuSaveRAP = new javax.swing.JMenuItem();
        jMenuCloseRAP = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jmModeler = new javax.swing.JMenu();
        jMenu_IncreasingLinearModeling = new javax.swing.JMenuItem();
        jMenu_DecreasingLinearModeling = new javax.swing.JMenuItem();
        jMenu_IncreasingNoLinearModeling = new javax.swing.JMenuItem();
        jMenu_DecreasingNoLinearModeling = new javax.swing.JMenuItem();
        jmNAP = new javax.swing.JMenu();
        jMenuItemGCR = new javax.swing.JMenuItem();
        jMenuItemGCRest = new javax.swing.JMenuItem();
        jMenuItemFB = new javax.swing.JMenuItem();
        jMenuItemIGER = new javax.swing.JMenuItem();
        jMenuItemGERIER = new javax.swing.JMenuItem();
        jmRAP = new javax.swing.JMenu();
        JMenuItemCSD = new javax.swing.JMenuItem();
        JMenuItemCAPφE = new javax.swing.JMenuItem();
        jMenuItemCAPμct = new javax.swing.JMenuItem();
        jMenuItemRankNAPs = new javax.swing.JMenuItem();
        jMenuItemRankModeler = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        jMenu5.setText("jMenu5");

        jMenuItem6.setText("jMenuItem6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paraconsistent Network Analysis");
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(null);
        getContentPane().add(jdpLPA2v);
        jdpLPA2v.setBounds(10, 0, 820, 450);
        jdpLPA2v.getAccessibleContext().setAccessibleName("");

        jMenuBar1.setName("RAP"); // NOI18N

        jmFile.setText("File");
        jmFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmFileActionPerformed(evt);
            }
        });

        jMenuNewRAP.setText("New RAP");
        jMenuNewRAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewRAPActionPerformed(evt);
            }
        });
        jmFile.add(jMenuNewRAP);

        jMenuOpenRAP.setText("Open RAP");
        jMenuOpenRAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenRAPActionPerformed(evt);
            }
        });
        jmFile.add(jMenuOpenRAP);

        jMenuSaveRAP.setText("Save RAP");
        jMenuSaveRAP.setEnabled(false);
        jMenuSaveRAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveRAPActionPerformed(evt);
            }
        });
        jmFile.add(jMenuSaveRAP);

        jMenuCloseRAP.setText("Close RA");
        jMenuCloseRAP.setEnabled(false);
        jMenuCloseRAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCloseRAPActionPerformed(evt);
            }
        });
        jmFile.add(jMenuCloseRAP);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jmFile.add(jMenuExit);

        jMenuBar1.add(jmFile);

        jmModeler.setText("Modeler");
        jmModeler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmModelerActionPerformed(evt);
            }
        });

        jMenu_IncreasingLinearModeling.setText("Increasing Linear Modeling");
        jMenu_IncreasingLinearModeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_IncreasingLinearModelingActionPerformed(evt);
            }
        });
        jmModeler.add(jMenu_IncreasingLinearModeling);

        jMenu_DecreasingLinearModeling.setText("Decreasing Linear Modeling");
        jMenu_DecreasingLinearModeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_DecreasingLinearModelingActionPerformed(evt);
            }
        });
        jmModeler.add(jMenu_DecreasingLinearModeling);

        jMenu_IncreasingNoLinearModeling.setText("Increasing No Linear Modeling");
        jMenu_IncreasingNoLinearModeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_IncreasingNoLinearModelingActionPerformed(evt);
            }
        });
        jmModeler.add(jMenu_IncreasingNoLinearModeling);

        jMenu_DecreasingNoLinearModeling.setText("Decreasing No Linear Modeling");
        jMenu_DecreasingNoLinearModeling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu_DecreasingNoLinearModelingActionPerformed(evt);
            }
        });
        jmModeler.add(jMenu_DecreasingNoLinearModeling);

        jMenuBar1.add(jmModeler);

        jmNAP.setText("NAP Interface ");
        jmNAP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmNAPActionPerformed(evt);
            }
        });

        jMenuItemGCR.setText("GCR");
        jMenuItemGCR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGCRActionPerformed(evt);
            }
        });
        jmNAP.add(jMenuItemGCR);

        jMenuItemGCRest.setText("GCRest");
        jMenuItemGCRest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGCRestActionPerformed(evt);
            }
        });
        jmNAP.add(jMenuItemGCRest);

        jMenuItemFB.setText("FB");
        jmNAP.add(jMenuItemFB);

        jMenuItemIGER.setText("GER");
        jMenuItemIGER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemIGERActionPerformed(evt);
            }
        });
        jmNAP.add(jMenuItemIGER);

        jMenuItemGERIER.setText("GERIER");
        jmNAP.add(jMenuItemGERIER);

        jMenuBar1.add(jmNAP);

        jmRAP.setText("RAP Configuration");

        JMenuItemCSD.setText("CSD");
        JMenuItemCSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCSDActionPerformed(evt);
            }
        });
        jmRAP.add(JMenuItemCSD);

        JMenuItemCAPφE.setText("CAPφE");
        JMenuItemCAPφE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMenuItemCAPφEActionPerformed(evt);
            }
        });
        jmRAP.add(JMenuItemCAPφE);

        jMenuItemCAPμct.setText("CAPμct");
        jmRAP.add(jMenuItemCAPμct);

        jMenuItemRankNAPs.setText("Rank NAPs");
        jmRAP.add(jMenuItemRankNAPs);

        jMenuItemRankModeler.setText("Rank Modeler");
        jmRAP.add(jMenuItemRankModeler);

        jMenuBar1.add(jmRAP);

        jMenu1.setText("Connectors");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setBounds(200, 100, 838, 485);
    }// </editor-fold>                        

    private void jMenuOpenRAPActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        int retorno = fileChooser.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // faz alguma coisa com arquivo
            SerializerRAP s = new SerializerRAP();
            RAP rap = s.loadRAP("file");
            
            JOptionPane.showMessageDialog(null, "RAP Open!");
        } else {
            JOptionPane.showMessageDialog(null, "RAP Open Fail!");
        }
        jMenuNewRAP.setEnabled(false);
        jMenuOpenRAP.setEnabled(false);
        jMenuSaveRAP.setEnabled(true);
        jMenuCloseRAP.setEnabled(true);
        jMenuExit.setEnabled(true);
    }                                            

    private void jMenuItemIGERActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        JavaInternalFrameGER obj = new JavaInternalFrameGER();
        jdpLPA2v.add(obj);
        obj.setVisible(true);
    }                                             

    private void jMenuItemGCRestActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void JMenuItemCAPφEActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void jMenuItemGCRActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        JavaInternalFrameCSD obj = new JavaInternalFrameCSD();
        jdpLPA2v.add(obj);
        obj.setVisible(true);
    }                                            

    private void jmNAPActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void jMenu_IncreasingLinearModelingActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        // TODO add your handling code here:
        JavaInternalFrameModeler obj = new JavaInternalFrameModeler();
        jdpLPA2v.add(obj);
        obj.setVisible(true);
    }                                                              

    private void jmModelerActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void jMenuNewRAPActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        //Instancia novo Catatalogo de RAP
        RAP rap = new RAP();
        rap.setRapName("TesteRAP.rap");
        jMenuNewRAP.setEnabled(false);
        jMenuOpenRAP.setEnabled(false);
        jMenuSaveRAP.setEnabled(true);
        jMenuCloseRAP.setEnabled(true);
        jMenuExit.setEnabled(true);
        JOptionPane.showMessageDialog(null, "New RAP Instance!");
    }                                           

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        System.exit(0);
    }                                         

    private void jmFileActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void jMenuSaveRAPActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        RAP rap = new RAP();
        JFileChooser chooser;
	chooser = new JFileChooser();
	String caminho = "";
	File file = null;
	int retorno = chooser.showSaveDialog(null); // showSaveDialog retorna um inteiro , e ele ira determinar que o chooser será para salvar.
	if (retorno==JFileChooser.APPROVE_OPTION){
      		caminho = chooser.getSelectedFile().getAbsolutePath();  // o getSelectedFile pega o arquivo e o getAbsolutePath retorna uma string com endereço.
	}
        inicializaVariaveis();
        SerializerRAP s = new SerializerRAP();
        s.saveRAP(rap, "TesteRAP.rap");
        jMenuNewRAP.setEnabled(true);
        jMenuOpenRAP.setEnabled(true);
        jMenuSaveRAP.setEnabled(false);
        jMenuCloseRAP.setEnabled(false);
        jMenuExit.setEnabled(true);
        JOptionPane.showMessageDialog(null, "RAP Saved!");
    }                                            

    private void jMenuCloseRAPActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        jMenuNewRAP.setEnabled(true);
        jMenuOpenRAP.setEnabled(true);
        jMenuSaveRAP.setEnabled(false);
        jMenuCloseRAP.setEnabled(false);
        jMenuExit.setEnabled(true);
        JOptionPane.showMessageDialog(null, "RAP Closed!");
    }                                             

    private void jMenu_DecreasingLinearModelingActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        // TODO add your handling code here:
    }                                                              

    private void jMenu_IncreasingNoLinearModelingActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        // TODO add your handling code here:
    }                                                                

    private void jMenu_DecreasingNoLinearModelingActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        // TODO add your handling code here:
    }                                                                

    private void JMenuItemCSDActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        JavaInternalFrameCSD obj = new JavaInternalFrameCSD();
        jdpLPA2v.add(obj);
        obj.setVisible(true);

    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaFrameLPA2v.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaFrameLPA2v.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaFrameLPA2v.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaFrameLPA2v.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        try {
            if (args.length == 1) {
                SerializerRAP s = new SerializerRAP();
                RAP rap = s.loadRAP("Teste Doenca Cardiaca");
                inicializaVariaveis();
            } else {
                //realizaTestes();
            }
        } catch (AssertionError e) {
            e.printStackTrace();
            System.out.println("Erros durante os testes !!");
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaFrameLPA2v().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem JMenuItemCAPφE;
    private javax.swing.JMenuItem JMenuItemCSD;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCloseRAP;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemCAPμct;
    private javax.swing.JMenuItem jMenuItemFB;
    private javax.swing.JMenuItem jMenuItemGCR;
    private javax.swing.JMenuItem jMenuItemGCRest;
    private javax.swing.JMenuItem jMenuItemGERIER;
    private javax.swing.JMenuItem jMenuItemIGER;
    private javax.swing.JMenuItem jMenuItemRankModeler;
    private javax.swing.JMenuItem jMenuItemRankNAPs;
    private javax.swing.JMenuItem jMenuNewRAP;
    private javax.swing.JMenuItem jMenuOpenRAP;
    private javax.swing.JMenuItem jMenuSaveRAP;
    private javax.swing.JMenuItem jMenu_DecreasingLinearModeling;
    private javax.swing.JMenuItem jMenu_DecreasingNoLinearModeling;
    private javax.swing.JMenuItem jMenu_IncreasingLinearModeling;
    private javax.swing.JMenuItem jMenu_IncreasingNoLinearModeling;
    private javax.swing.JDesktopPane jdpLPA2v;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmModeler;
    private javax.swing.JMenu jmNAP;
    private javax.swing.JMenu jmRAP;
    // End of variables declaration                   
}
